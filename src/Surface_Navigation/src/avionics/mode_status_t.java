/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package avionics;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class mode_status_t implements lcm.lcm.LCMEncodable
{
    public int Mode_ID;
    public int Status_ID;
 
    public mode_status_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf0de6a13a079354fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(avionics.mode_status_t.class))
            return 0L;
 
        classes.add(avionics.mode_status_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.Mode_ID); 
 
        outs.writeInt(this.Status_ID); 
 
    }
 
    public mode_status_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public mode_status_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static avionics.mode_status_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        avionics.mode_status_t o = new avionics.mode_status_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.Mode_ID = ins.readInt();
 
        this.Status_ID = ins.readInt();
 
    }
 
    public avionics.mode_status_t copy()
    {
        avionics.mode_status_t outobj = new avionics.mode_status_t();
        outobj.Mode_ID = this.Mode_ID;
 
        outobj.Status_ID = this.Status_ID;
 
        return outobj;
    }
 
}

