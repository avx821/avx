"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class vision_options_t(object):
    __slots__ = ["timestamp", "trackbar", "equalization", "morphological", "roi", "save_video", "power", "area", "tau"]

    def __init__(self):
        self.timestamp = 0
        self.trackbar = False
        self.equalization = False
        self.morphological = False
        self.roi = False
        self.save_video = False
        self.power = 0
        self.area = 0
        self.tau = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(vision_options_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbbbhhd", self.timestamp, self.trackbar, self.equalization, self.morphological, self.roi, self.save_video, self.power, self.area, self.tau))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vision_options_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vision_options_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = vision_options_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.trackbar = bool(struct.unpack('b', buf.read(1))[0])
        self.equalization = bool(struct.unpack('b', buf.read(1))[0])
        self.morphological = bool(struct.unpack('b', buf.read(1))[0])
        self.roi = bool(struct.unpack('b', buf.read(1))[0])
        self.save_video = bool(struct.unpack('b', buf.read(1))[0])
        self.power, self.area, self.tau = struct.unpack(">hhd", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if vision_options_t in parents: return 0
        tmphash = (0x357786d5e99d1524) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if vision_options_t._packed_fingerprint is None:
            vision_options_t._packed_fingerprint = struct.pack(">Q", vision_options_t._get_hash_recursive([]))
        return vision_options_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

