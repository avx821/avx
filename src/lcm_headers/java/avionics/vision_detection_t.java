/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package avionics;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class vision_detection_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public long frame_timestamp;
    public boolean detected;
    public double x;
    public double y;
    public double area;
    public int number_of_objects;
    public int type;
    public int color;
 
    public vision_detection_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xee8ce710fcd43b04L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(avionics.vision_detection_t.class))
            return 0L;
 
        classes.add(avionics.vision_detection_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeLong(this.frame_timestamp); 
 
        outs.writeByte( this.detected ? 1 : 0); 
 
        outs.writeDouble(this.x); 
 
        outs.writeDouble(this.y); 
 
        outs.writeDouble(this.area); 
 
        outs.writeInt(this.number_of_objects); 
 
        outs.writeInt(this.type); 
 
        outs.writeInt(this.color); 
 
    }
 
    public vision_detection_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public vision_detection_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static avionics.vision_detection_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        avionics.vision_detection_t o = new avionics.vision_detection_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.frame_timestamp = ins.readLong();
 
        this.detected = ins.readByte()!=0;
 
        this.x = ins.readDouble();
 
        this.y = ins.readDouble();
 
        this.area = ins.readDouble();
 
        this.number_of_objects = ins.readInt();
 
        this.type = ins.readInt();
 
        this.color = ins.readInt();
 
    }
 
    public avionics.vision_detection_t copy()
    {
        avionics.vision_detection_t outobj = new avionics.vision_detection_t();
        outobj.timestamp = this.timestamp;
 
        outobj.frame_timestamp = this.frame_timestamp;
 
        outobj.detected = this.detected;
 
        outobj.x = this.x;
 
        outobj.y = this.y;
 
        outobj.area = this.area;
 
        outobj.number_of_objects = this.number_of_objects;
 
        outobj.type = this.type;
 
        outobj.color = this.color;
 
        return outobj;
    }
 
}

