/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package avionics;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pod_data_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public double gps[];
    public double pod_heading;
    public double wind_data[];
    public boolean pod_wave_off;
 
    public pod_data_t()
    {
        gps = new double[2];
        wind_data = new double[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x610459f9f6b532ffL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(avionics.pod_data_t.class))
            return 0L;
 
        classes.add(avionics.pod_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.gps[a]); 
        }
 
        outs.writeDouble(this.pod_heading); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.wind_data[a]); 
        }
 
        outs.writeByte( this.pod_wave_off ? 1 : 0); 
 
    }
 
    public pod_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pod_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static avionics.pod_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        avionics.pod_data_t o = new avionics.pod_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.gps = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.gps[a] = ins.readDouble();
        }
 
        this.pod_heading = ins.readDouble();
 
        this.wind_data = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.wind_data[a] = ins.readDouble();
        }
 
        this.pod_wave_off = ins.readByte()!=0;
 
    }
 
    public avionics.pod_data_t copy()
    {
        avionics.pod_data_t outobj = new avionics.pod_data_t();
        outobj.timestamp = this.timestamp;
 
        outobj.gps = new double[(int) 2];
        System.arraycopy(this.gps, 0, outobj.gps, 0, 2); 
        outobj.pod_heading = this.pod_heading;
 
        outobj.wind_data = new double[(int) 2];
        System.arraycopy(this.wind_data, 0, outobj.wind_data, 0, 2); 
        outobj.pod_wave_off = this.pod_wave_off;
 
        return outobj;
    }
 
}

