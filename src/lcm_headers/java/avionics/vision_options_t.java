/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package avionics;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class vision_options_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public boolean trackbar;
    public boolean equalization;
    public boolean morphological;
    public boolean roi;
    public boolean save_video;
    public short power;
    public short area;
    public double tau;
 
    public vision_options_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x357786d5e99d1524L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(avionics.vision_options_t.class))
            return 0L;
 
        classes.add(avionics.vision_options_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeByte( this.trackbar ? 1 : 0); 
 
        outs.writeByte( this.equalization ? 1 : 0); 
 
        outs.writeByte( this.morphological ? 1 : 0); 
 
        outs.writeByte( this.roi ? 1 : 0); 
 
        outs.writeByte( this.save_video ? 1 : 0); 
 
        outs.writeShort(this.power); 
 
        outs.writeShort(this.area); 
 
        outs.writeDouble(this.tau); 
 
    }
 
    public vision_options_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public vision_options_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static avionics.vision_options_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        avionics.vision_options_t o = new avionics.vision_options_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.trackbar = ins.readByte()!=0;
 
        this.equalization = ins.readByte()!=0;
 
        this.morphological = ins.readByte()!=0;
 
        this.roi = ins.readByte()!=0;
 
        this.save_video = ins.readByte()!=0;
 
        this.power = ins.readShort();
 
        this.area = ins.readShort();
 
        this.tau = ins.readDouble();
 
    }
 
    public avionics.vision_options_t copy()
    {
        avionics.vision_options_t outobj = new avionics.vision_options_t();
        outobj.timestamp = this.timestamp;
 
        outobj.trackbar = this.trackbar;
 
        outobj.equalization = this.equalization;
 
        outobj.morphological = this.morphological;
 
        outobj.roi = this.roi;
 
        outobj.save_video = this.save_video;
 
        outobj.power = this.power;
 
        outobj.area = this.area;
 
        outobj.tau = this.tau;
 
        return outobj;
    }
 
}

